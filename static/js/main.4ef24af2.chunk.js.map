{"version":3,"sources":["store/index.js","assets/logo.svg","components/Counter.js","containers/CounterContainer.js","actions/counter.js","components/Header.js","routes/index.js","utils/serviceWorker.js","index.js","reducers/counter.js","reducers/index.js","store/storeProd.js","constants/ActionTypes.js"],"names":["store","require","default","module","exports","Intro","styled","p","Counter","increment","incrementIfOdd","decrement","counter","onClick","CounterContainer","props","dispatch","type","ActionTypes","INCREMENT_COUNTER","DECREMENT_COUNTER","getState","this","React","Component","connect","state","year","Date","getFullYear","rotate360","keyframes","TopBar","div","Header","src","logo","className","alt","Container","history","createBrowserHistory","Routes","path","component","Boolean","window","location","hostname","match","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","initialState","rootReducer","combineReducers","middlewares","ReduxThunk","enhancer","applyMiddleware","configureStore","createStore"],"mappings":"8HAAiBA,EACbC,EAAQ,IADJC,QAKRC,EAAOC,QAAUJ,K,mBCLjBG,EAAOC,QAAU,IAA0B,kC,ySCI3C,IAAMC,EAAQC,IAAOC,EAAV,KA0BIC,MAtBf,YAAqE,IAAlDC,EAAiD,EAAjDA,UAAWC,EAAsC,EAAtCA,eAAgBC,EAAsB,EAAtBA,UAAWC,EAAW,EAAXA,QACvD,OACE,iCACE,kBAACP,EAAD,6BACuB,sDADvB,uBAIA,uCACYO,EADZ,UAC2B,4BAAQC,QAASJ,GAAjB,KAD3B,IACkE,4BAAQI,QAASF,GAAjB,KAAuC,IACvG,4BAAQE,QAASH,GAAjB,uB,OCVD,IAAMI,EAAb,2MAMEL,UAAY,WACV,EAAKM,MAAMC,SAAS,CAAEC,KAAMC,IAAYC,qBAP5C,EAUER,UAAY,WACV,EAAKI,MAAMC,SAAS,CAAEC,KAAMC,IAAYE,qBAX5C,EAcEV,eAAiB,WCjBGV,IAAMqB,WAAlBT,QACM,IAAM,GACpBZ,IAAMgB,SAAS,CAAEC,KAAMC,IAAYC,qBDCrC,wEAmBI,OACE,kBAAC,EAAD,CACEP,QAASU,KAAKP,MAAMH,QACpBH,UAAWa,KAAKb,UAChBE,UAAWW,KAAKX,UAChBD,eAAgBY,KAAKZ,qBAxB7B,GAAsCa,IAAMC,WAoC7BC,mBANf,SAAyBC,GACvB,MAAO,CACLd,QAASc,EAAMd,WAIJa,CAAyBX,G,oaEtCxC,IAAMa,GAAO,IAAIC,MAAOC,cAElBC,EAAYC,YAAH,KASTC,EAAS1B,IAAO2B,IAAV,IAOKH,GAcFI,MATf,WACE,OACE,kBAACF,EAAD,KACE,yBAAKG,IAAKC,IAAMC,UAAU,aAAaC,IAAI,SAC3C,8CAAoBX,K,6GCzB1B,IAAMY,EAAYjC,IAAO2B,IAAV,KAGFO,EAAUC,cAeRC,MAbf,WACE,OACE,kBAAC,IAAD,CAAQF,QAASA,GACf,kBAACD,EAAD,KACE,kBAAC,EAAD,MACA,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOI,KAAK,IAAIC,UAAW9B,Q,MCNjB+B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MAAM,2DCTnCC,iBACE,kBAAC,IAAD,CAAUlD,MAAOA,KACf,kBAAC,EAAD,OAEFmD,SAASC,eAAe,SD8GpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAACC,GAClCA,EAAaC,iB,kEE1HbC,EAAe,ECCrB,IAIeC,EAJKC,YAAgB,CAClCjD,QDAa,WAAgD,IAA/Bc,EAA8B,uDAAtBiC,EACtC,QAD4D,wCAC7C1C,MACb,KAAKC,IAAYC,kBACf,OAAOO,EAAQ,EACjB,KAAKR,IAAYE,kBACf,OAAOM,EAAQ,EACjB,QACE,OAAOA,MEXb,wCAIA,IAAMoC,EAAc,CAACC,KACfC,EAAW,CAACC,IAAe,WAAf,EAAmBH,IAEtB,SAASI,IAAmC,IAApBP,EAAmB,uDAAJ,GACpD,OAAOQ,IAAW,WAAX,GAAYP,EAAaD,GAAzB,OAA0CK,M,+BCRpC,KAEb7C,kBAAmB,oBACnBC,kBAAmB,uB","file":"static/js/main.4ef24af2.chunk.js","sourcesContent":["const { default: store } = process.env.NODE_ENV === 'production'\n  ? require('./storeProd')\n  : require('./storeDev')\n\n// Exporting the store, then use it anywhere like store.getState() or store.dispatch()\nmodule.exports = store()","module.exports = __webpack_public_path__ + \"static/media/logo.795fb555.svg\";","import React from 'react'\nimport PropTypes from 'prop-types'\nimport styled from '@emotion/styled'\n\nconst Intro = styled.p`\n  font-size: large;\n`\n\nfunction Counter({ increment, incrementIfOdd, decrement, counter }) {\n  return (\n    <section>\n      <Intro>\n        To get started, edit <code>src/routes/index.js </code>\n        and save to reload.\n      </Intro>\n      <p>\n        Clicked: {counter} times <button onClick={increment}>+</button> <button onClick={decrement}>-</button>{' '}\n        <button onClick={incrementIfOdd}>Increment if odd</button>\n      </p>\n    </section>\n  )\n}\n\nCounter.propTypes = {\n  increment: PropTypes.func.isRequired,\n  incrementIfOdd: PropTypes.func.isRequired,\n  decrement: PropTypes.func.isRequired,\n  counter: PropTypes.number.isRequired,\n}\n\nexport default Counter\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport Counter from '../components/Counter'\nimport ActionTypes from '../constants/ActionTypes'\nimport { incrementIfOdd } from '../actions/counter'\nimport { connect } from 'react-redux'\n\nexport class CounterContainer extends React.Component {\n  static propTypes = {\n    dispatch: PropTypes.func.isRequired,\n    counter: PropTypes.number.isRequired,\n  }\n\n  increment = () => {\n    this.props.dispatch({ type: ActionTypes.INCREMENT_COUNTER })\n  }\n\n  decrement = () => {\n    this.props.dispatch({ type: ActionTypes.DECREMENT_COUNTER })\n  }\n\n  incrementIfOdd = () => {\n    incrementIfOdd()\n  }\n\n  render() {\n    return (\n      <Counter\n        counter={this.props.counter}\n        increment={this.increment}\n        decrement={this.decrement}\n        incrementIfOdd={this.incrementIfOdd}\n      />\n    )\n  }\n}\n\nfunction mapStateToProps(state) {\n  return {\n    counter: state.counter,\n  }\n}\n\nexport default connect(mapStateToProps)(CounterContainer)\n","import ActionTypes from '../constants/ActionTypes'\nimport store from '../store'\n\nexport function incrementIfOdd() {\n  const { counter } = store.getState()\n  if (counter % 2 === 0) return\n  store.dispatch({ type: ActionTypes.INCREMENT_COUNTER })\n}\n","import React from 'react'\nimport logo from '../assets/logo.svg'\nimport styled from '@emotion/styled'\nimport { keyframes } from '@emotion/core'\n\nconst year = new Date().getFullYear()\n\nconst rotate360 = keyframes`\n  from {\n    transform: rotate(0deg);\n  }\n  to {\n    transform: rotate(360deg);\n  }\n`\n\nconst TopBar = styled.div`\n  background-color: #222;\n  height: 150px;\n  padding: 20px;\n  color: #fff;\n\n  .redux-logo {\n    animation: ${rotate360} infinite 20s linear;\n    height: 80px;\n  }\n`\n\nfunction Header() {\n  return (\n    <TopBar>\n      <img src={logo} className=\"redux-logo\" alt=\"logo\" />\n      <h2>Track Mail.Ru, {year}</h2>\n    </TopBar>\n  )\n}\n\nexport default Header\n","import React from 'react'\nimport CounterContainer from '../containers/CounterContainer'\nimport Header from '../components/Header'\nimport { Router, Route, Switch } from 'react-router-dom'\nimport { createBrowserHistory } from 'history'\nimport styled from '@emotion/styled'\n\nconst Container = styled.div`\n  text-align: center;\n`\nexport const history = createBrowserHistory()\n\nfunction Routes() {\n  return (\n    <Router history={history}>\n      <Container>\n        <Header />\n        <Switch>\n          <Route path=\"/\" component={CounterContainer} />\n        </Switch>\n      </Container>\n    </Router>\n  )\n}\n\nexport default Routes\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/),\n)\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA',\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.',\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (response.status === 404 || (contentType != null && contentType.indexOf('javascript') === -1)) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.')\n    })\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister()\n    })\n  }\n}\n","import React from 'react'\nimport { render } from 'react-dom'\nimport { Provider } from 'react-redux'\nimport store from './store'\nimport Routes from './routes'\nimport './styles/globalStyles.css'\nimport * as serviceWorker from './utils/serviceWorker'\n\nrender(\n  <Provider store={store}>\n    <Routes />\n  </Provider>,\n  document.getElementById('root'),\n)\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister()\n","import ActionTypes from '../constants/ActionTypes'\n\nconst initialState = 0\n\nexport default function counter(state = initialState, action) {\n  switch (action.type) {\n    case ActionTypes.INCREMENT_COUNTER:\n      return state + 1\n    case ActionTypes.DECREMENT_COUNTER:\n      return state - 1\n    default:\n      return state\n  }\n}\n","import { combineReducers } from 'redux'\nimport counter from './counter'\n\nconst rootReducer = combineReducers({\n  counter,\n})\n\nexport default rootReducer\n","import { createStore, applyMiddleware } from 'redux'\nimport ReduxThunk from 'redux-thunk'\nimport rootReducer from '../reducers'\n\nconst middlewares = [ReduxThunk]\nconst enhancer = [applyMiddleware(...middlewares)]\n\nexport default function configureStore(initialState = {}) {\n  return createStore(rootReducer, initialState, ...enhancer)\n}\n","export default {\n  // Counter\n  INCREMENT_COUNTER: 'INCREMENT_COUNTER',\n  DECREMENT_COUNTER: 'DECREMENT_COUNTER',\n}\n"],"sourceRoot":""}